import unittest
from datetime import datetime, timedelta
from imgserver import domain

def _checkLastStatusDate(item):
    delta = (datetime.utcnow() - item.lastStatusChangeDate) 
    assert delta.days == 0 and delta.seconds < 10

class OriginalItemTestCase(unittest.TestCase):
        
    def __checkItem(self, item):
        assert item.id == 'MYID12435'
        assert item.status == domain.STATUS_OK
        assert item.width == 800
        assert item.height == 600
        assert item.format == domain.IMAGE_FORMAT_JPEG
        _checkLastStatusDate(item)
        
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsString(self):
        item = domain.OriginalItem('MYID12435', domain.STATUS_OK, ('800', '600'), domain.IMAGE_FORMAT_JPEG)
        self.__checkItem(item)
    
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsInt(self):
        item = domain.OriginalItem('MYID12435', domain.STATUS_OK, (800, 600), domain.IMAGE_FORMAT_JPEG)
        self.__checkItem(item)
        
    def testShouldNotBeAbleToCreateItemWithNullId(self):
        try:
            domain.OriginalItem(None, domain.STATUS_OK, (800, 600), domain.IMAGE_FORMAT_JPEG)
        except Exception:
            pass
        else:
            self.fail()
            
    def testShouldNotBeAbleToCreateItemWithNullStatus(self):
        try:
            domain.OriginalItem('MYID12435', None, (800, 600), domain.IMAGE_FORMAT_JPEG)
        except Exception:
            pass
        else:
            self.fail()
            
    def testShouldNotBeAbleToCreateItemWithNullWidth(self):
        try:
            domain.OriginalItem('MYID12435', domain.STATUS_OK, (None, 600), domain.IMAGE_FORMAT_JPEG)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullHeight(self):
        try:
            domain.OriginalItem('MYID12435', domain.STATUS_OK, (800, None), domain.IMAGE_FORMAT_JPEG)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullFormat(self):
        try:
            domain.OriginalItem('MYID12435', domain.STATUS_OK, (800, 600), None)
        except Exception:
            pass
        else:
            self.fail()
    
    def testSetStatusShouldUpdateLastStatusChangeDate(self):
        item = domain.OriginalItem('MYID12435', domain.STATUS_INCONSISTENT, (800, 600), domain.IMAGE_FORMAT_JPEG)
        # fuck date by breaking encapsulation
        item._lastStatusChangeDate = datetime.utcnow() - timedelta(1)
        item.setStatus(domain.STATUS_OK)
        _checkLastStatusDate(item)
    
class DerivedItemTestCase(unittest.TestCase):
    
    def setUp(self):
        unittest.TestCase.setUp(self)
        self.originalItem = domain.OriginalItem('MYID12435', domain.STATUS_OK, ('800', '600'), domain.IMAGE_FORMAT_JPEG)
    
    def __checkItem(self, item):
        assert item.status == domain.STATUS_OK
        assert item.width == 100
        assert item.height == 100
        assert item.format == domain.IMAGE_FORMAT_JPEG
        assert item.originalItem.id =='MYID12435'
        assert item.originalItem.status == domain.STATUS_OK
        assert item.originalItem.width == 800
        assert item.originalItem.height == 600
        assert item.originalItem.format == domain.IMAGE_FORMAT_JPEG
        _checkLastStatusDate(item)
    
    def testShouldIdBeAutogenerated(self):
        item = domain.DerivedItem(domain.STATUS_OK, ('100', '100'), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        assert item.id == 'MYID12435-100x100-JPEG'
    
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsString(self):
        item = domain.DerivedItem(domain.STATUS_OK, ('100', '100'), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        self.__checkItem(item)
    
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsInt(self):
        item = domain.DerivedItem(domain.STATUS_OK, (100, 100), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        self.__checkItem(item)
        
    def testSetStatusShouldUpdateLastStatusChangeDate(self):
        item = domain.DerivedItem(domain.STATUS_INCONSISTENT, (100, 100), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        # fuck date by breaking encapsulation
        item._lastStatusChangeDate = datetime.utcnow() - timedelta(1)
        item.setStatus(domain.STATUS_OK)
        _checkLastStatusDate(item)
            
    def testShouldNotBeAbleToCreateItemWithNullStatus(self):
        try:
            domain.DerivedItem(None, (800, 600), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        except Exception:
            pass
        else:
            self.fail()
            
    def testShouldNotBeAbleToCreateItemWithNullWidth(self):
        try:
            domain.DerivedItem(domain.STATUS_OK, (None, 600), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullHeight(self):
        try:
            domain.DerivedItem(domain.STATUS_OK, (800, None), domain.IMAGE_FORMAT_JPEG, self.originalItem)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullFormat(self):
        try:
            domain.DerivedItem(domain.STATUS_OK, (800, 600), None, self.originalItem)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullOriginalItem(self):
        try:
            domain.DerivedItem(domain.STATUS_OK, (800, 600), domain.IMAGE_FORMAT_JPEG, None)
        except Exception:
            pass
        else:
            self.fail()
    

def suite():
    return unittest.TestSuite((unittest.makeSuite(OriginalItemTestCase, 'test'), 
                       unittest.makeSuite(DerivedItemTestCase, 'test')))