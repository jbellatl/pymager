"""
    ImgServer RESTful Image Conversion Service 
    Copyright (C) 2008 Sami Dalouche

    This file is part of ImgServer.

    ImgServer is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ImgServer is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with ImgServer.  If not, see <http://www.gnu.org/licenses/>.

"""
import unittest
from datetime import datetime, timedelta
from imgserver import domain
from imgserver.domain.abstractitem import AbstractItem
from imgserver.domain.originalitem import OriginalItem
from imgserver.domain.deriveditem import DerivedItem
from tests.imgservertests import assertionutils

    
class DerivedItemTestCase(unittest.TestCase):
    
    def setUp(self):
        unittest.TestCase.setUp(self)
        self.original_item = OriginalItem('MYID12435', domain.STATUS_OK, ('800', '600'), domain.IMAGE_FORMAT_JPEG)
    
    def __checkItem(self, item):
        assert item.status == domain.STATUS_OK
        assert item.width == 100
        assert item.height == 100
        assert item.format == domain.IMAGE_FORMAT_JPEG
        assert item.original_item.id =='MYID12435'
        assert item.original_item.status == domain.STATUS_OK
        assert item.original_item.width == 800
        assert item.original_item.height == 600
        assert item.original_item.format == domain.IMAGE_FORMAT_JPEG
        assertionutils.check_last_status_date(item)
    
    def testShouldIdBeAutogenerated(self):
        item = DerivedItem(domain.STATUS_OK, ('100', '100'), domain.IMAGE_FORMAT_JPEG, self.original_item)
        assert item.id == 'MYID12435-100x100-JPEG'
    
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsString(self):
        item = DerivedItem(domain.STATUS_OK, ('100', '100'), domain.IMAGE_FORMAT_JPEG, self.original_item)
        self.__checkItem(item)
    
    def testShouldBeAbleToCreateItemWithWidthAndHeightAsInt(self):
        item = DerivedItem(domain.STATUS_OK, (100, 100), domain.IMAGE_FORMAT_JPEG, self.original_item)
        self.__checkItem(item)
        
    def testSetStatusShouldUpdatelast_status_change_date(self):
        item = DerivedItem(domain.STATUS_INCONSISTENT, (100, 100), domain.IMAGE_FORMAT_JPEG, self.original_item)
        # fuck date by breaking encapsulation
        item._last_status_change_date = datetime.utcnow() - timedelta(1)
        item.status = domain.STATUS_OK
        assertionutils.check_last_status_date(item)
            
    def testShouldNotBeAbleToCreateItemWithNullStatus(self):
        try:
            DerivedItem(None, (800, 600), domain.IMAGE_FORMAT_JPEG, self.original_item)
        except Exception:
            pass
        else:
            self.fail()
            
    def testShouldNotBeAbleToCreateItemWithNullWidth(self):
        try:
            DerivedItem(domain.STATUS_OK, (None, 600), domain.IMAGE_FORMAT_JPEG, self.original_item)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullHeight(self):
        try:
            DerivedItem(domain.STATUS_OK, (800, None), domain.IMAGE_FORMAT_JPEG, self.original_item)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullFormat(self):
        try:
            DerivedItem(domain.STATUS_OK, (800, 600), None, self.original_item)
        except Exception:
            pass
        else:
            self.fail()
    
    def testShouldNotBeAbleToCreateItemWithNullOriginalItem(self):
        try:
            DerivedItem(domain.STATUS_OK, (800, 600), domain.IMAGE_FORMAT_JPEG, None)
        except Exception:
            pass
        else:
            self.fail()
    

def suite():
    return unittest.TestSuite((unittest.makeSuite(OriginalItemTestCase, 'test'), 
                       unittest.makeSuite(DerivedItemTestCase, 'test')))